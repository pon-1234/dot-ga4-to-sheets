const { AccommodationAnalyticsProcessor } = require('./src/index');

/**
 * Cloud Functions „Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà
 * ÂÆøÊ≥äÊñΩË®≠GA4ÂàÜÊûê„ÅÆËá™ÂãïÂÆüË°åÊ©üËÉΩ
 */

exports.monthlyUpdate = async (req, res) => {
  console.log('üîÑ Monthly accommodation analytics triggered');
  
  try {
    const processor = new AccommodationAnalyticsProcessor();
    await processor.processAccommodationAnalytics(12, 'month');
    
    res.status(200).json({
      success: true,
      message: 'Monthly accommodation analytics completed successfully',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Monthly accommodation analytics failed:', error);
    res.status(500).json({
      success: false,
      message: 'Monthly accommodation analytics failed',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

exports.quarterlyUpdate = async (req, res) => {
  console.log('üîÑ Quarterly accommodation analytics triggered');
  
  try {
    const processor = new AccommodationAnalyticsProcessor();
    await processor.processAccommodationAnalytics(12, 'quarter');
    
    res.status(200).json({
      success: true,
      message: 'Quarterly accommodation analytics completed successfully',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('‚ùå Quarterly accommodation analytics failed:', error);
    res.status(500).json({
      success: false,
      message: 'Quarterly accommodation analytics failed',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
};

exports.scheduledMonthlyUpdate = async (data, context) => {
  console.log('üìÖ Scheduled monthly accommodation analytics triggered by Cloud Scheduler');
  
  try {
    const processor = new AccommodationAnalyticsProcessor();
    await processor.processAccommodationAnalytics(12, 'month');
    console.log('‚úÖ Scheduled monthly accommodation analytics completed successfully');
  } catch (error) {
    console.error('‚ùå Scheduled monthly accommodation analytics failed:', error);
    throw error;
  }
};

exports.scheduledQuarterlyUpdate = async (data, context) => {
  console.log('üìÖ Scheduled quarterly accommodation analytics triggered by Cloud Scheduler');
  
  try {
    const processor = new AccommodationAnalyticsProcessor();
    await processor.processAccommodationAnalytics(12, 'quarter');
    console.log('‚úÖ Scheduled quarterly accommodation analytics completed successfully');
  } catch (error) {
    console.error('‚ùå Scheduled quarterly accommodation analytics failed:', error);
    throw error;
  }
};